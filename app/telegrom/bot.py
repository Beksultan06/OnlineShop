import os
import django
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()

from app.shop.models import Product, Order

TOKEN = "8420115725:AAGhOwGmXk4S2GDO-MhEAU9tGtIhITiYpeE"
ADMIN_CHAT_ID = 5199401134  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderForm(StatesGroup):
    name = State()
    phone = State()
    address = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∞–∑–∏–Ω OnlineShop üõçÔ∏è\n–ù–∞–ø–∏—à–∏ /products —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def show_products(message: types.Message):
    products = await sync_to_async(list)(Product.objects.all())
    if not products:
        await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî")
        return

    for product in products:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{product.id}")]
        ])
        await message.answer(f"üì¶ {product.name}\nüí∞ {product.price}", reply_markup=keyboard)

# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /products
@dp.message(Command("products"))
async def products_handler(message: types.Message):
    await show_products(message)

# –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("details_"))
async def show_details(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    product = await sync_to_async(Product.objects.get)(id=product_id)
    await state.update_data(product_id=product_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
    ])
    await callback.message.answer(
        f"üì¶ {product.name}\nüí∞ –¶–µ–Ω–∞: {product.price}\n\n{product.description}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Üí —Å–±–æ—Ä –∏–º–µ–Ω–∏
@dp.callback_query(lambda c: c.data == "confirm_order")
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderForm.name)
    await callback.answer()

# –°–±–æ—Ä –∏–º–µ–Ω–∏
@dp.message(StateFilter(OrderForm.name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(OrderForm.phone)

# –°–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(StateFilter(OrderForm.phone))
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(user_phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.address)

# –°–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message(StateFilter(OrderForm.address))
async def process_address(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    product = await sync_to_async(Product.objects.get)(id=user_data["product_id"])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await sync_to_async(Order.objects.create)(
        product=product,
        quantity=1,
        user_name=user_data["user_name"],
        user_phone=user_data["user_phone"],
        user_address=message.text
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price}\n"
        f"üßë‚Äçüíº –ò–º—è: {user_data['user_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['user_phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {message.text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã:"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å–Ω–æ–≤–∞
    await show_products(message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–¢–æ–≤–∞—Ä: {product.name}\n"
        f"–¶–µ–Ω–∞: {product.price}\n"
        f"–ò–º—è: {user_data['user_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['user_phone']}\n"
        f"–ê–¥—Ä–µ—Å: {message.text}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}"
    )

    await state.clear()

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    await state.clear()
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ú–∞–≥–∞–∑–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
